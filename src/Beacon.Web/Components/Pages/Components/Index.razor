@page "/components"
@implements IDisposable
@using Apollo.Abstractions
@using Beacon.Contracts.Models
@using Beacon.Services
@using Beacon.Web.Components.Dialogs
@using Beacon.Web.Endpoints
@inject ApolloClient PublisherFactory
@inject BeaconStore BeaconStore
@inject IStateObserver StateObserver
@inject IDialogService DialogService
@rendermode InteractiveServer

<PageTitle>Components</PageTitle>

<FluentStack Orientation="Orientation.Vertical">
    <FluentLabel Typo="Typography.H2">Components</FluentLabel>
    <p>Text about the thing with the thing</p>
</FluentStack>
<FluentStack Style="margin-top: 10px">
    <FluentCard>
        <FluentLabel Typo="Typography.Header">Total Components</FluentLabel>
        <p>20</p>
    </FluentCard>
    <FluentCard>
        <FluentLabel Typo="Typography.Header">Prod Components</FluentLabel>
        <p>20</p>
    </FluentCard>
    <FluentCard>
        <FluentLabel Typo="Typography.Header">Dev Components</FluentLabel>
        <p>20</p>
    </FluentCard>
</FluentStack>

<FluentButton Style="margin-top: 10px" Appearance="Appearance.Accent" OnClick="PublishCreate">New Component</FluentButton>
<FluentDivider Style="margin: 10px" Orientation="Orientation.Horizontal" Role="DividerRole.Separator"/>

<FluentTabs Orientation="Orientation.Vertical" ActiveTabId="tab-overview">
    <FluentTab Label="Overview" Id="tab-overview">
        <FluentDataGrid @ref="grid" Id="componentGrid" Items="@BeaconStore.Components" GridTemplateColumns="2fr 1fr 1fr 1fr 2fr" TGridItem="Component">
            <TemplateColumn Title="Name" Sortable="true" SortBy="@nameSort" Align="Align.Start">
                <FluentStack Orientation="Orientation.Vertical">
                    @{
                        var id = Guid.NewGuid().ToString();
                    }
                    <a href="@($"/components/{context.Guid}")" id="@id">@context.Name</a>
                    <FluentTooltip Anchor="@id" Position="TooltipPosition.Right">
                        @context.Description
                    </FluentTooltip>
                </FluentStack>
            </TemplateColumn>
            <TemplateColumn Title="Status" Align="Align.Start">
                <HealthBadge ComponentId="context.Guid" />
            </TemplateColumn>
            <PropertyColumn Title="Type" Sortable="true" Property="@(c => c!.Type)" Align="Align.Start"/>
            <TemplateColumn Title="Environments" Align="Align.Start">
                @foreach (var environment in context.Environments)
                {
                    <FluentBadge Appearance="Appearance.Accent" Style="margin-right: 5px">@environment</FluentBadge>
                }
            </TemplateColumn>
            <PropertyColumn Title="Link" Property="@(c => c!.Links.FirstOrDefault())" Align="Align.Start"/>
        </FluentDataGrid>
    </FluentTab>
    <FluentTab Label="Activity" Id="tab-activity">
        <div style="height: 400px">This will contain most recent health-checks.</div>
    </FluentTab>
</FluentTabs>

@code {

    private IDisposable? componentObserver;
    private IPublisher localPublisher;

    FluentDataGrid<Component>? grid;
    string? activeId = "tab-overview";

    GridSort<Component> nameSort = GridSort<Component>.ByAscending(p => p.Name);

    protected override void OnInitialized()
    {
        // searchNotifier.Subscribe(Search);
        
        componentObserver = StateObserver.Register<ComponentCreatedEvent>(OnComponentCreated);
        localPublisher = PublisherFactory.CreatePublisher(BeaconEndpoint.EndpointConfig);
    }

    private Task OnComponentCreated(ComponentCreatedEvent arg)
        => InvokeAsync(() => grid?.RefreshDataAsync() ?? Task.CompletedTask);

    private async Task PublishCreate(MouseEventArgs obj)
    {
        var data = new EditComponentDialog.EditComponentData();
        var dialog = await DialogService.ShowDialogAsync<EditComponentDialog>(data,
            new DialogParameters
            {
                //Height = "400px",
                Title = "New Component",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            });

        var result = await dialog.Result;

        if (result is { Cancelled: false, Data: not null })
        {
            var component = (EditComponentDialog.EditComponentData)result.Data;
            await localPublisher.Send(new CreateComponentCommand
            {
                Name = component.Name,
                Type = component.Type,
                Description = component.Description,
                Environments = component.Environments,
                Links = component.Links
            }, default);
        }
    }

    public void Dispose()
        => componentObserver?.Dispose();

}