@page "/components"
@using Apollo.Messaging
@using Apollo.Messaging.Abstractions
@using Beacon.Contracts
@using Beacon.Contracts.Models
@using Beacon.Services
@using Apollo
@inject IPublisherFactory PublisherFactory
@inject BeaconStore BeaconStore
@inject IStateObserver StateObserver
@rendermode InteractiveServer

<PageTitle>Components</PageTitle>

<FluentLabel Typo="Typography.H1">Components</FluentLabel>
<FluentButton OnClick="PublishCreate">Button</FluentButton>
<FluentStack Style="margin-top: 10px">
    <FluentCard>
        <FluentLabel Typo="Typography.Header">Total Components</FluentLabel>
        <p>20</p>
    </FluentCard>
    <FluentCard>
        <FluentLabel Typo="Typography.Header">Prod Components</FluentLabel>
        <p>20</p>
    </FluentCard>
    <FluentCard>
        <FluentLabel Typo="Typography.Header">Dev Components</FluentLabel>
        <p>20</p>
    </FluentCard>
</FluentStack>

<FluentDivider Style="width: 100%;margin: 10px" Orientation="Orientation.Horizontal" Role="DividerRole.Separator"></FluentDivider>

<FluentTabs Orientation="Orientation.Vertical" ActiveTabId="tab-overview">
    <FluentTab Label="Overview" Id="tab-overview">
        <FluentDataGrid @ref="grid" Id="componentGrid" Items="@BeaconStore.Components" GridTemplateColumns="1fr 1fr 1fr 1fr 2fr" TGridItem="Component">
            <TemplateColumn Title="Name" Align="Align.Start">
                @{
                    var id = Guid.NewGuid().ToString();
                }
                <a href="javascript:void(0)" id="@id" title="@context.Description">@context.Name</a>
                <FluentTooltip Anchor="@id">
                    @context.Description
                </FluentTooltip>
            </TemplateColumn>
            <TemplateColumn Title="Status" Align="Align.Start">
                <FluentBadge Fill="green" BackgroundColor="green" Color="white">
                    Online
                </FluentBadge>
            </TemplateColumn>
            <PropertyColumn Title="Type" Sortable="true" Property="@(c => c!.Type)" Align="Align.Start"/>
            <TemplateColumn Title="Environments" Align="Align.Start">
                @foreach (var environment in context.Environments)
                {
                    <FluentBadge Appearance="Appearance.Accent" Style="margin-right: 5px">@environment</FluentBadge>
                }
            </TemplateColumn>
            <PropertyColumn Title="Link" Property="@(c => c!.Links.FirstOrDefault())" Align="Align.Start"/>
        </FluentDataGrid>
    </FluentTab>
    <FluentTab Label="Activity" Id="tab-activity">
        <div style="height: 400px">This will contain most recent health-checks.</div>
    </FluentTab>
</FluentTabs>

@code {

    private IPublisher localPublisher;
    private IDisposable? stateObserver;
    string? activeId = "tab-overview";
    FluentDataGrid<Component>? grid;
    protected override Task OnInitializedAsync()
    {
        stateObserver = StateObserver.Register<ComponentCreatedEvent>(OnComponentCreated);
        localPublisher = PublisherFactory.CreatePublisher("BeaconEndpoint", PublisherType.Local);
        return Task.CompletedTask;
    }

    private Task OnComponentCreated(ComponentCreatedEvent arg) 
        => InvokeAsync(() => grid?.RefreshDataAsync() ?? Task.CompletedTask);

    private async Task PublishCreate(MouseEventArgs obj)
    {
        await localPublisher.SendCommandAsync(
            new CreateComponentCommand
            {
                Name = "Test Component",
                Type = "Service",
                Description = "This is a test component",
                Environments = ["Production", "Development"],
                Links = ["https://www.google.com"]
            }, default);
    }

}