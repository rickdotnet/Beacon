@page "/components"
@rendermode InteractiveServer

<PageTitle>Components</PageTitle>

<FluentLabel Typo="Typography.H1">Components</FluentLabel>

<FluentStack Style="margin-top: 10px">
    <FluentCard>
        <FluentLabel Typo="Typography.Header">Total Components</FluentLabel>
        <p>20</p>
    </FluentCard>
    <FluentCard>
        <FluentLabel Typo="Typography.Header">Prod Components</FluentLabel>
        <p>20</p>
    </FluentCard>
    <FluentCard>
        <FluentLabel Typo="Typography.Header">Dev Components</FluentLabel>
        <p>20</p>
    </FluentCard>
</FluentStack>

<FluentDivider Style="width: 100%;margin: 10px" Orientation="Orientation.Horizontal" Role="DividerRole.Separator"></FluentDivider>

<FluentTabs Orientation="Orientation.Vertical" OnTabChange="HandleOnTabChange" ActiveTabId="tab-overview">
    <FluentTab Label="Overview" Id="tab-overview">
        @if (components == null)
        {
            <p>
                <em>Loading...</em>
            </p>
        }
        else
        {
            <!-- This page is rendered in SSR mode, so the FluentDataGrid component does not offer any interactivity (like sorting). -->
            <FluentDataGrid Id="componentGrid" Items="@components" GridTemplateColumns="1fr 1fr 1fr 1fr 2fr" TGridItem="ComponentData">
                <TemplateColumn Title="Name" Align="Align.Start">
                    @{
                        var id = Guid.NewGuid().ToString();
                    }
                    <a href="javascript:void(0)" id="@id" title="@context.Description">@context.Name</a>
                    <FluentTooltip Anchor="@id">
                        @context.Description
                    </FluentTooltip>
                </TemplateColumn>
                <TemplateColumn Title="Status" Align="Align.Start">
                    <FluentBadge Fill="green" BackgroundColor="green" Color="white">
                        Online
                    </FluentBadge>
                </TemplateColumn>
                <PropertyColumn Title="Type" Property="@(c => c!.Type)" Align="Align.Start"/>
                <TemplateColumn Title="Environments" Align="Align.Start">
                    @foreach (var environment in context.Environments)
                    {
                        <FluentBadge Appearance="Appearance.Accent" Style="margin-right: 5px">@environment</FluentBadge>
                    }
                </TemplateColumn>
                <PropertyColumn Title="Link" Property="@(c => c!.Link)" Align="Align.Start"/>
            </FluentDataGrid>
        }
    </FluentTab>
    <FluentTab Label="Activity" Id="tab-activity">
        <div style="height: 400px">This will contain most recent health-checks.</div>
    </FluentTab>
</FluentTabs>

@code {
    private IQueryable<ComponentData>? components;

    string? activeId = "tab-overview";
    FluentTab? changedto;

    private void HandleOnTabChange(FluentTab tab)
    {
        changedto = tab;
    }

    protected override Task OnInitializedAsync()
    {
        components = Enumerable.Range(1, 5).Select(index => new ComponentData(
            $"Component {index}",
            "Service",
            $"This is a description of component {index}",
            ["Production", "Development"],
            $"https://www.example.com/component/{index}"
        )).AsQueryable();

        return Task.CompletedTask;
    }

    public record ComponentData(string Name, string Type, string Description, string[] Environments, string Link);

}